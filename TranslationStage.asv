classdef TranslationStage < handle
    %Class representing translation of the object and motor in the xy plane
    
    properties (Access = private)
        motion % double[][] x/y-values for tracking continuously
        stepSize % double[] value for discrete step size in x, or x&y if 2D
        fullMotion %double[][] x/y record of continuous motion if have discretised
        angle %angle of translation stage axis with respect to detector pixels
        magAoR %magnification of movements at the axis of rotation. i.e dx(pixels)=dx(mm)*optSystem.PixelSize/TranslationStage.magAoR;
        motionAngle %angle of motion in radians, motion should be linear at an angle
    end
    
    methods 
        %% CONSTRUCTOR
        function obj = TranslationStage()
        end
        
        %% GET /SET
        % @param double angle, in radians
        function setAngle(obj,angle)
            obj.angle = angle;
        end  
        % @param double magAoR, magnifcation at the axis of rotation
        function setMagAoR(obj,magAoR)
            obj.magAoR = magAoR;
        end
        % @param double stepSize, size of discrete steps in mm (can be 1D
        % or 2D depending on if x or x&y motion)
        function setStepSize(obj,stepSize)
            obj.stepSize = stepSize;
        end
        % @param double[] motion, 1D array of motion
        function setMotion(obj,motion)
            obj.motion = motion;
        end
         % @param double[] motion, 1D array of continuous motion
        function setFullMotion(obj,fullMotion)
            obj.fullMotion = fullMotion;
        end
        % @param double motionAngle, angle of linear motion in xy plane
        function setMotionAngle(obj,motionAngle)
            obj.motionAngle = motionAngle;
        end
 
        function out = getAngle(obj)
            out = obj.angle;
        end
        function out = getMagAoR(obj)
            out = obj.magAoR;
        end        
        function out = getMotion(obj)
            out = obj.motion;
        end
        function out = getFullMotion(obj)
            out = obj.fullMotion;
        end
        function out = getMotionAngle(obj)
            out = obj.motionAngle;
        end
        % @param int projectionNumber, projection number
        % @return double out, x-position of tStage in mm
        function out = getMotionAtProj(obj,projectionNumber)
            if isempty(obj.motion)
                out = 0;
            else
                out = obj.motion(projectionNumber);
            end
        end
        % @return double[] out, difference between current motion profile
        % and the full continuous motion profile
        function out = discreteDifference(obj)
           out = obj.motion-obj.fullMotion;
        end
        
        % @param int projectionNumber, projection number
        % @return double out, x-position of tStage in pixels
        function out = getMotionAtProj(obj,projectionNumber)
            if isempty(obj.motion)
                out = 0;
            else
                out = obj.motion(projectionNumber);
            end
        end
         
        %% PLOT
        function plotMotion(obj)
             figure; 
            for k=1:size(obj.motion,1)
                subplot(1,size(obj.motion,1),k)
                plot(obj.motion(k,:)); hold on; plot(obj.fullMotion(k,:)); hold off; 
                xlabel('Projection Number');
                ylabel('Distance (mm)'); axis square;
                switch k
                    case 1
                        title('x Motion');
                    case 2
                        title('y Motion');
                end
            end
        end
        
        %% SIMULATION
        % fills motion with array of x-values for sinusoidal motion around
        % centre of OPTSystem volume
        % @param OPTSystem optSys, theta values
        % @param double amplitude, amplitude of motion in mm (object space)
        % @param double phase, phase of motion in radians
        % @param double varargin, optional offset of motion in mm
        function sinusoidalMotion(obj,optSys,amplitude,phase,varargin)
            if nargin==5
                offset = varargin{1};
            else
                offset = 0;
            end
            obj.motion = amplitude.*sin(optSys.theta+phase)+offset;
        end
        
        % @param OPTSystem optSys
        % @param StepperMotor stepperMotortStattasdfewasefsd ds 
        % @param PointObject point
        function trackPoint(obj,optSys,stepperMotor,point)
            r = sqrt((point.getX-stepperMotor.getX)^2+(point.getZ-stepperMotor.getZ)^2);
            phi = atan2(point.getZ-stepperMotor.getZ,point.getX-stepperMotor.getX);
            obj.fullMotion = r.*cos(phi+optSys.theta);
            if ~isempty(obj.stepSize) 
                obj.discretiseMotion;
            else
                obj.motion = obj.fullMotion;
            end
            obj.plotMotion;
        end
        
        % @param OPTSystem optSys
        % @param StepperMotor stepperMotor
        % @param PointObject point
        function discretiseMotion(obj)
            if isempty(obj.stepSize) || isempty(obj.motion)
                error('Please assign a step size and ideal tracking motion');
            else
                numberSteps = round(obj.fullMotion./obj.stepSize);
                obj.motion = numberSteps.*obj.stepSize;
            end
        end

    end
    
    %% Static Methods
    methods (Static)
        function [ estimates,continuousMotion,flag ] = fitSinusoidToDiscreteData(discreteMotion)
            if size(discreteMotion,1)~=1
                discreteMotion = discreteMotion.';
            end
            
           % discreteMotion = discreteMotion*10^3;
            
            step = discreteMotion(2:end)-discreteMotion(1:end-1);
            step(step==0)=NaN;
            step = nanmean(abs(step));

            start_guesses = [(max(discreteMotion)-min(discreteMotion))/2,-pi/2,min(discreteMotion)+(max(discreteMotion)-min(discreteMotion))/2];
            model = @fun;
            options = optimset('MaxFunEvals',5000*length(start_guesses),'MaxIter',5000*length(start_guesses));
            [estimates,~,flag] = fminsearch(model,start_guesses,options);

            % figure;
            %drawnow;

            [~,continuousMotion] = model(estimates);
              %figure;
              %plot(ydata); hold on; plot(fit,'r'); hold off; drawnow;

            function [sse,continuousMotion] = fun(params)
                A = params(1);
                B = params(2);
                C = params(3);

                theta = linspace(0,2*pi-2*pi/length(discreteMotion),length(discreteMotion));

                fit = A.*sin(theta+B);

                numberSteps = round(fit./step);

                fitDiscrete = numberSteps.*step+C;
                
                continuousMotion = fit+C;

               % plot(continuousMotion); hold on; plot(fitDiscrete); hold on; plot(discreteMotion); hold off; drawnow;
               
                sse = nansum((fitDiscrete-discreteMotion).^2);
            end   
        end
    end
    
end

